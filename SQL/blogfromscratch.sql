-- phpMyAdmin SQL Dump
-- version 5.0.1
-- https://www.phpmyadmin.net/
--
-- Hôte : 127.0.0.1
-- Généré le : lun. 16 nov. 2020 à 15:57
-- Version du serveur :  5.7.29
-- Version de PHP : 7.3.23

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données : `blogfromscratch`
--
CREATE DATABASE IF NOT EXISTS `blogfromscratch` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
USE `blogfromscratch`;

-- --------------------------------------------------------

--
-- Structure de la table `articles`
--

DROP TABLE IF EXISTS `articles`;
CREATE TABLE `articles` (
  `id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `image_url` varchar(255) NOT NULL,
  `published_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `reading_time` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  `is_public` int(1) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Déchargement des données de la table `articles`
--

INSERT INTO `articles` (`id`, `title`, `content`, `image_url`, `reading_time`, `author_id`, `is_public`) VALUES
(1, 'What is JSON?', '<p>JSON is the most widely used <em>format for interchanging data on the web</em>. Its meaning is \"Java Script Object Notation\".</p>\r\n<p>It originates from the JavaScript language. JSON uses the JavaScript syntax, but the JSON format is text only.</p>\r\n<h2>Example</h2>\r\n<p>The data below is in json format:</p>\r\n<div>\r\n<pre><code>{\"employees\":[\r\n{\"name\":\"Alice\", \"email\":\"alice@xyz.com\"},\r\n{\"name\":\"Alex\", \"email\":\"alex@xyz.com\"},\r\n{\"name\":\"Allison\", \"email\":\"allison@xyz.com\"}\r\n]}\r\n</code></pre>\r\n</div>\r\n<p>Its easily readable by a computer and human (compared to the XML format).</p>\r\n<p>You can convert any JavaScript object into JSON and send JSON to the server.</p>\r\n<p>But what\'s more:</p>\r\n<ul>\r\n<li>JSON is a cross language data format</li>\r\n<li>JSON is both more compact and (in my view) more readable</li>\r\n<li>You can convert json to Python objects</li>\r\n<li>You can convert json to Python Pandas Dataframe, then to csv or Excel</li>\r\n<li>You can convert Python objects to json</li>\r\n</ul>\r\n<p>Json text can be read and used as a data format by any programming language.</p>\r\n<p>One of the ways to use it, is the json module:</p>\r\n<div>\r\n<pre><code>import json\r\ndata = \'{\"name\": \"Alice\", \"city\": \"Amsterdam\"}\'\r\npython_obj = json.loads(data)\r\nprint python_obj[\"name\"]\r\n</code></pre>\r\n</div>\r\n<p>But the pandas module may be better suited. Pandas is a data analysis module and it supports many features like reading and writing excel.</p>\r\n<p>You can read <a href=\"https://pythonbasics.org/pandas-json/\">json in Python Pandas</a>.</p>\r\n<p>Reference:<br /> <a href=\"https://docs.python.org/3/library/json.html\">json module</a><br /> <a href=\"https://pythonspot.com/tag/json/\">json examples</a></p>', 'https://dev-to-uploads.s3.amazonaws.com/i/63ogus0p4srs81qmxvsr.jpg', 6, 1, 1),
(2, 'Simplicity is a developer\'s best friend ', '<p>You need to embrace simplicity if you want to achieve results today and stay successful tomorrow. Long term product quality, performance and development speed all rest on the simplicity of a system.</p>\r\n\r\n<blockquote>\r\n<p>Run with the minimum that achieves the business goals.</p>\r\n</blockquote>\r\n\r\n<p>There are two kinds of complexity in any project: the inherent complications of the problem domain and the unnecessary, \"incidental\" or \"accidental\" complexity introduced by developers. The domain complexity is more or less fixed and has to be accepted as is. Dealing with it is the primary role of a developer.<br>\r\nAccidental complexity, on the other hand, has to be avoided and minimised at all cost.</p>\r\n\r\n<p>Be frugal with code, processes and infrastructure. Everything you add today will have to be looked at and understood by you or someone else in the future. The more complicated your system is, the more resources people dedicate to learning it instead of implementing improvements and new features.</p>\r\n\r\n<blockquote>\r\n<p>Simple might seem boring at first - but it\'s the opposite: it\'s liberating. </p>\r\n</blockquote>\r\n\r\n<p>Continue reading <a href=\"https://thekarel.gitbook.io/best-practices/the-big-picture/principles/simple\">Simplicity is the best ally in the long run</a> on my <a href=\"https://thekarel.gitbook.io/best-practices/\">Best Practices on GitBook</a></p>\r\n\r\n\r\n      ', 'https://dev-to-uploads.s3.amazonaws.com/i/p0nbze7wxof8uyssueju.jpg', 4, 2, 1),
(3, 'How to make performance testing? ', '<p>Performance testing is software testing that focuses on how the system will perform under a particular load. It will give organizations the diagnostic info they need to remove bottlenecks. It\'s an important aspect of running a web application. In this article, you will find insights and scenarios on software testing from a business point of view. </p>\r\n\r\n<p>How Performance Testing Helpful to Your Business</p>\r\n\r\n<p>IT enterprise divided into two divisions: IT and business. Because of this, the whole series of positions present to help these groups communicate. Performance testing is really very important to the business.</p>\r\n\r\n<p>Issues in Performance Testing <br>\r\n Anyone working in a software development company understands how bugs and errors on their website can ruin their work. If we have to deal with these bugs, we should have good knowledge about how to fix and confirm that the problem has been fixed or not.<br>\r\nPerformance issues usually don\'t generate any kind of prediction, because they don\'t directly involve the software behavior. It might occur because the developer has done some mistakes while designing the website or maybe there must be some other reason.</p>\r\n\r\n<p>Why You Need Performance Testing</p>\r\n\r\n<p>Basically, web testing is a way to tell how the system will behave in different situations. It is the operation of determining the speed, responsiveness, and stability of a computer, software program, network or device under a heavy workload, that is why we need performance testing. We have to deal with some types of performance tests listed below are the major ones.</p>\r\n\r\n<p>Process of Performance Testing<br>\r\nExamine and identify the cause of testing<br>\r\nUnderstand the variety of load situations according to the performance test structure.<br>\r\nTesting the scripts at the API and user interface level.<br>\r\nImplement performance testing<br>\r\nIn-depth test result analysis for overall improvement.<br>\r\nOverall <a href=\"https://www.testingxperts.com/services/performance-testing/\">performance testing in Canada</a> is used to authenticate the responsiveness, scalability, reliability and other important feature of application <a href=\"https://www.testingxperts.com\">software testing</a>. It allows us to rectify all the errors before releasing the software. </p>\r\n\r\n\r\n      ', 'https://res.cloudinary.com/practicaldev/image/fetch/s--9sIpuUhj--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/25bk4y3hsgnlvoo1zai6.png', 6, 3, 1),
(6, 'Web performance for a Frontend developer ', '<p>For Web developers, <a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\">performance</a> isn\'t optional now. Performance plays a major role in the success of any online venture. <a href=\"https://www.doubleclickbygoogle.com/articles/mobile-speed-matters/\">DoubleClick</a> by Google found 53% of mobile site visits were abandoned if a page took longer than 3 seconds to load.</p>\r\n\r\n<p>Amazon and others found that 100 milliseconds of latency is responsible for 1% in sales. Flipkart triples time-on-site with Progressive Web App, 40% higher re-engagement rate.</p>\r\n\r\n<p>Pinterest increased search engine traffic and sign-ups by 15% when they reduced perceived wait times by 40% and many more examples are there.</p>\r\n\r\n<h3>\r\n  <a name=\"the-why\" href=\"#the-why\" class=\"anchor\">\r\n  </a>\r\n  The Why?\r\n</h3>\r\n\r\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\">Why Performance Matters</a></p>\r\n\r\n<h2>\r\n  <a name=\"improving-performance\" href=\"#improving-performance\" class=\"anchor\">\r\n  </a>\r\n  Improving performance\r\n</h2>\r\n\r\n<p>In this post, I am jotting down some <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">loading performance</a> techniques helpful for Web developers to consider while building websites/web apps. For rendering performance, please follow <a href=\"https://developers.google.com/web/fundamentals/performance/rendering/\">this</a> link.</p>\r\n\r\n<p>Let\'s get started. </p>\r\n\r\n<h3>\r\n  <a name=\"setting-up-performance-budget\" href=\"#setting-up-performance-budget\" class=\"anchor\">\r\n  </a>\r\n  Setting up Performance Budget\r\n</h3>\r\n\r\n<blockquote>\r\n<p>A performance budget is a limit for pages which the team is not allowed to exceed. It could be a max JavaScript bundle size, total image weight, a specific load time (e.g Time-to-Interactive in under 5s on 3G/4G) or threshold on any number of other metrics. -- @addyosmani</p>\r\n</blockquote>\r\n\r\n<p>FCP(First Contentful Paint) and TTI(Time To Interactive) are crucial. </p>\r\n\r\n<p>Follow below link on how to set the performance budget.</p>\r\n\r\n<ul>\r\n<li>\r\n<a href=\"https://addyosmani.com/blog/performance-budgets/\">Start Performance Budgeting</a> by <a href=\"https://mobile.twitter.com/addyosmani\">@addyosmani</a>\r\n</li>\r\n<li><a href=\"https://www.keycdn.com/blog/web-performance-budget#setting-a-web-performance-budget\">Setting and Calculating a Web Performance Budget</a></li>\r\n</ul>\r\n\r\n<p>Now let\'s look at top 3 performance essentials for web developers -</p>\r\n\r\n<h3>\r\n  <a name=\"1-javascript\" href=\"#1-javascript\" class=\"anchor\">\r\n  </a>\r\n  1. JavaScript\r\n</h3>\r\n\r\n<blockquote>\r\n<p>The JavaScript is the most expensive resource, see <a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\">The Cost Of JavaScript In 2018</a> by <a href=\"https://mobile.twitter.com/addyosmani\">@addyosmani</a></p>\r\n</blockquote>\r\n\r\n<p>Strategies deliver JavaScript efficiently -</p>\r\n\r\n<ul>\r\n<li>Consider implementing <a href=\"https://webpack.js.org/guides/code-splitting/\">code-splitting</a>\r\n</li>\r\n<li><a href=\"https://nolanlawson.com/2018/03/20/smaller-lodash-bundles-with-webpack-and-babel/\">Trim your JavaScript bundles</a></li>\r\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/resource-prioritization\">Prioritize resources with Preload, Preconnect, Prefetch</a></li>\r\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/\">Reduce JavaScript Payloads with Tree Shaking</a></li>\r\n<li><a href=\"https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/\">Embrace performance budgets</a></li>\r\n</ul>\r\n\r\n<h3>\r\n  <a name=\"2-images\" href=\"#2-images\" class=\"anchor\">\r\n  </a>\r\n  2. Images\r\n</h3>\r\n\r\n<blockquote>\r\n<p>Images often account for most of the downloaded bytes on a web page.</p>\r\n</blockquote>\r\n\r\n<p>Below 4 things should be considered to deliver images efficiently</p>\r\n\r\n<ul>\r\n<li>Appropriate image format</li>\r\n<li>Appropriate compression method</li>\r\n<li>Appropriate for display size and density according to viewport/device(Picture element)</li>\r\n<li>Load only necessary - lazy loaded</li>\r\n</ul>\r\n\r\n<p>Please go through following guides for detailed info.</p>\r\n\r\n<ul>\r\n<li><a href=\"https://images.guide/\">images.guide</a></li>\r\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization\">Image Optimization</a></li>\r\n<li><a href=\"https://svgontheweb.com/\">SVG Will Save Us</a></li>\r\n<li>\r\n<a href=\"https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/\">Lazy loading</a>\r\n-- <a href=\"https://addyosmani.com/blog/lazy-loading/\">Native image lazy-loading</a> is coming for the web.</li>\r\n</ul>\r\n\r\n<p>Native image lazy-loading example -</p>\r\n\r\n\r\n\r\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"celebration.jpg\"</span> <span class=\"na\">loading=</span><span class=\"s\">\"lazy\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"...\"</span> <span class=\"nt\">/&gt;</span>\r\n<span class=\"nt\">&lt;iframe</span> <span class=\"na\">src=</span><span class=\"s\">\"video-player.html\"</span> <span class=\"na\">loading=</span><span class=\"s\">\"lazy\"</span><span class=\"nt\">&gt;&lt;/iframe&gt;</span>\r\n</code></pre></div>\r\n\r\n\r\n\r\n<p>Note from Google -</p>\r\n\r\n<p><i>Image formats like JPEG 2000, JPEG XR, and WebP often provide better compression than PNG or JPEG, which leads to faster downloads and less data consumption.</i></p>\r\n\r\n<h3>\r\n  <a name=\"3-fonts\" href=\"#3-fonts\" class=\"anchor\">\r\n  </a>\r\n  3. Fonts\r\n</h3>\r\n\r\n<blockquote>\r\n<p>Minimise flash of fonts</p>\r\n</blockquote>\r\n\r\n<p>Please go through below links for a detailed explanation on <code>font-display</code> property and font performance.</p>\r\n\r\n<ul>\r\n<li><a href=\"https://developers.google.com/web/updates/2016/02/font-display\">Controlling Font Performance with font-display</a></li>\r\n<li><a href=\"https://css-tricks.com/font-display-masses/\"><code>font-display</code> for the Masses</a></li>\r\n</ul>\r\n\r\n<p>Let\'s cover up additional approaches as well.</p>\r\n\r\n<h3>\r\n  <a name=\"4-converting-your-websiteapps-to-pwas\" href=\"#4-converting-your-websiteapps-to-pwas\" class=\"anchor\">\r\n  </a>\r\n  4. Converting your website/apps to <a href=\"https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/\">PWAs</a>\r\n</h3>\r\n\r\n<blockquote>\r\n<p>Progressive Web Apps are user experiences that have the reach of the web, and are Reliable, Fast and Engaging. -- Google Web</p>\r\n</blockquote>\r\n\r\n<p>You can partially adopt PWA by using benefits of the service worker to cache a few resources like fonts, images, styles, scripts, etc. and then moving to other approaches to build full fledge PWA.</p>\r\n\r\n<p>With PWA we can build reliable, fast and engaging websites/web apps. <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\">Service workers</a> enable a Progressive Web App to load instantly, regardless of the network state. The service worker is like a client-side proxy, allows to control the cache and how to respond to resource requests.</p>\r\n\r\n<p>Read <a href=\"https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/\">The Offline Cookbook</a> for more on Offline experience for Web and Service worker.</p>\r\n\r\n<p><strong>Top 5 Service Worker Essentials for Web Developers</strong></p>\r\n\r\n<p><a href=\"https://www.youtube.com/watch?v=IBpQlNeq5-o&amp;index=3&amp;list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF&amp;t=0s\">Here</a> is a Youtube video from Chrome Dev Summit 2018.</p>\r\n\r\n<h3>\r\n  <a name=\"5-best-architecturing-and-rendering-technique\" href=\"#5-best-architecturing-and-rendering-technique\" class=\"anchor\">\r\n  </a>\r\n  5. Best architecturing and rendering technique\r\n</h3>\r\n\r\n<ul>\r\n<li><a href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\">Rendering on the Web</a></li>\r\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/prpl-pattern/\">The PRPL Pattern</a></li>\r\n<li><a href=\"https://codelabs.developers.google.com/codelabs/your-first-pwapp/#2\">Architect your App Shell</a></li>\r\n</ul>\r\n\r\n<h3>\r\n  <a name=\"6-some-other-techniques\" href=\"#6-some-other-techniques\" class=\"anchor\">\r\n  </a>\r\n  6. Some other techniques\r\n</h3>\r\n\r\n<ul>\r\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching\">HTTP Caching</a></li>\r\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer\">Optimizing Encoding</a></li>\r\n</ul>\r\n\r\n<h2>\r\n  <a name=\"tooling\" href=\"#tooling\" class=\"anchor\">\r\n  </a>\r\n  Tooling\r\n</h2>\r\n\r\n<ul>\r\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/\">Chrome dev tool - Audit, Performance, Memory, JavaScript profiler, Coverage, Performance monitor, Network</a></li>\r\n<li><a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse</a></li>\r\n<li><a href=\"https://www.webpagetest.org/\">webpagetest</a></li>\r\n<li><a href=\"https://developers.google.com/speed/pagespeed/module/\">pagespeed</a></li>\r\n</ul>\r\n\r\n<p>Above are some most trusted tools/services most of the peoples using it.</p>\r\n\r\n<p>You can follow <a href=\"https://mobile.twitter.com/addyosmani\">Addy Osmani</a> on Twitter for the latest updates on web performance. He is an Engineering Manager at Google working on Chrome.</p>\r\n\r\n<p>Also, I would like to mention <a href=\"https://mobile.twitter.com/umaar\">Umar Hansa</a> for his great work for gathering and sharing great <a href=\"https://umaar.com/dev-tips/\">dev tool tips</a>.</p>\r\n\r\n<p>Hope that was helpful on your journey. Please don\'t forgot to hit like button if you like it!</p>\r\n\r\n\r\n\r\n      ', 'https://thepracticaldev.s3.amazonaws.com/i/ryvx9439vkxx587x466c.jpg', 10, 2, 1),
(7, '20 VS Code shortcuts to speed up your flow20 VS Code shortcuts to speed up your flow', '<p>In this article I want to share some of my favorite and most used VS Code shortcuts that help me save time, make my life a little easier and, as a heavy keyboard user, also allow me to stay in my developer flow. </p>\r\n\r\n<p>You may be familiar with some of them already but hopefully you will discover a new shortcut that you can introduce into your workflow starting right now.</p>\r\n\r\n<blockquote>\r\n<p><em>I jotted down the key combinations for Mac users. If you’re a Windows or Linux user, you can find the key bindings for your OS <a href=\"https://code.visualstudio.com/docs/getstarted/keybindings\">here</a>.</em></p>\r\n</blockquote>\r\n\r\n<p>Alright then, so without needing to select the entire line first...</p>\r\n\r\n<ul>\r\n<li>\r\n<code>⌘X</code> - cut a line</li>\r\n<li>\r\n<code>⌘C</code>- copy a line </li>\r\n<li>\r\n<code>⇧⌘K</code> - delete a line</li>\r\n<li>\r\n<code>⌘L</code> - select the line </li>\r\n</ul>\r\n\r\n<p>And while your cursor is on a specific line..</p>\r\n\r\n<ul>\r\n<li>\r\n<code>⌘Enter</code> - insert a new line below it</li>\r\n<li>\r\n<code>⇧⌘Enter</code> - insert a new line above it</li>\r\n<li>\r\n<code>⌥↑</code> and <code>⌥↓</code> - move the line up/down</li>\r\n<li>\r\n<code>⇧⌥↑</code> and <code>⇧⌥↓</code> - duplicate line on the line above/below it</li>\r\n<li>\r\n<code>⌘]</code> and <code>⌘[</code> - indent and outdent the line</li>\r\n<li>\r\n<code>⌘/</code> - (un)comment out the line</li>\r\n</ul>\r\n\r\n<p>Or within a specific file..</p>\r\n\r\n<ul>\r\n<li>\r\n<code>⌘D</code> - find other instances of selected code</li>\r\n<li>\r\n<code>⌥Z</code> - toggle word wrap</li>\r\n</ul>\r\n\r\n<p>Lastly, for some editor/window management..</p>\r\n\r\n<ul>\r\n<li>\r\n<code>⌘P</code> - find and go to file (quick open)</li>\r\n<li>\r\n<code>⌘N</code> - new editor</li>\r\n<li>\r\n<code>⌘W</code> - close editor</li>\r\n<li>\r\n<code>⌘B</code> - toggle visibility of the side panel</li>\r\n<li>\r\n<code>⌃</code>` - toggle visibility of the integrated terminal</li>\r\n<li>\r\n<code>⌘2</code> - split screen into two editor groups</li>\r\n<li>\r\n<code>⇧⌘T</code> - reopen recently closed editor</li>\r\n<li>\r\n<code>⌥⌘←</code> and <code>⌥⌘→</code> - view editor tab on the left/right</li>\r\n</ul>\r\n\r\n<p><strong>Happy coding!</strong></p>\r\n\r\n\r\n      ', 'https://thepracticaldev.s3.amazonaws.com/i/3tlp0khbeav8lnyhvxo1.png', 12, 3, 1);
INSERT INTO `articles` (`id`, `title`, `content`, `image_url`, `reading_time`, `author_id`, `is_public`) VALUES
(8, '26 Miraculous VS Code Tools for JavaScript Developers in 2019 ', '<p><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> (more casually known as <em>VS code</em>) is a lightweight but powerful cross platform source code editor that runs on your desktop. With built in support for development tools like TypeScript and the Chrome Debugger, I quickly fell in love with the editor the more I used it to build my projects.</p>\r\n\r\n<p>Who <em>doesn\'t</em> love the bajillion open source extensions available for the public to use and contribute to?</p>\r\n\r\n<p>If you\'re looking for more tools to add onto your development kit, I hope this article helps you find a new tool to adopt!</p>\r\n\r\n<p><em>Not all</em> of these tools are <em>specifically for the JavaScript language</em>, but tools for <em>JavaScript developers</em> like you and I who share a common interest. <em>As a JavaScript developer</em>, I will share what enhances my development flow in several aspects revolving around 3 of 5 of the <a href=\"https://www.livescience.com/60752-human-senses.html\">Five Senses</a> of the human.</p>\r\n\r\n<p>Here are 26 Miraculous VS Code Tools for JavaScript Developers in 2019</p>\r\n\r\n<h2>\r\n  <a name=\"1-project-snippets\" href=\"#1-project-snippets\" class=\"anchor\">\r\n  </a>\r\n  1. Project Snippets\r\n</h2>\r\n\r\n<p>The first one to top off the list is my all time favorite <a href=\"https://marketplace.visualstudio.com/items?itemName=rebornix.project-snippets\">Project Snippets</a>--derived from the built in original <a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets\"><em>User Snippets</em></a> in VS Code.</p>\r\n\r\n<p>If you\'re not familiar with User Snippets, basically this feature allows you to create your own code snippets to re-use throughout your projects.</p>\r\n\r\n<p>But what exactly does it mean to \"re-use\" them?</p>\r\n\r\n<p>Well, if you find often yourself writing any type of boilerplate like the one below:<br>\r\n</p>\r\n\r\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useReducer</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\'</span><span class=\"s1\">react</span><span class=\"dl\">\'</span>\r\n\r\n<span class=\"kd\">const</span> <span class=\"nx\">initialState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n  <span class=\"c1\">//</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"kd\">const</span> <span class=\"nx\">reducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\r\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"na\">default</span><span class=\"p\">:</span>\r\n      <span class=\"k\">return</span> <span class=\"nx\">state</span>\r\n  <span class=\"p\">}</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"kd\">const</span> <span class=\"nx\">useSomeHook</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\r\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useReducer</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">,</span> <span class=\"nx\">initialState</span><span class=\"p\">)</span>\r\n\r\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\r\n    <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\r\n  <span class=\"p\">}</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">useSomeHook</span>\r\n</code></pre></div>\r\n\r\n\r\n\r\n<p>You can actually just slap that right into your user snippets so that instead of having to write out (or copy and paste) the entire thing, you only need to type in a custom <em>prefix</em> to generate the snippet that you configured it with. If you go to <em>File &gt; Preferences &gt; User Snippets</em>, you can optionally create a new global snippet by clicking <em>New Global Snippets File</em>.</p>\r\n\r\n<p>For example, to create your own snippets file for a TypeScript React project, you can click <em>New Global Snippets File</em>, type in <em>typescriptreact.json</em> and it will direct you to a newly created <code>.json</code> file that you can use for react applications built using TypeScript.</p>\r\n\r\n<p>For example, to create a user snippet from the code example above, this is how you would do it:<br>\r\n</p>\r\n\r\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\r\n  </span><span class=\"nl\">\"const initialState = {}; const reducer = (state, action)\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"prefix\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"rsr\"</span><span class=\"p\">,</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"const initialState = {\"</span><span class=\"p\">,</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"  //$1\"</span><span class=\"p\">,</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"}\"</span><span class=\"p\">,</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"const reducer = (state, action) =&gt; {\"</span><span class=\"p\">,</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"  switch (action.type) {\"</span><span class=\"p\">,</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"    default:\"</span><span class=\"p\">,</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"      return state\"</span><span class=\"p\">,</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"  }\"</span><span class=\"p\">,</span><span class=\"w\">\r\n      </span><span class=\"s2\">\"}\"</span><span class=\"w\">\r\n    </span><span class=\"p\">]</span><span class=\"w\">\r\n  </span><span class=\"p\">}</span><span class=\"w\">\r\n</span><span class=\"p\">}</span><span class=\"w\">\r\n</span></code></pre></div>\r\n\r\n\r\n\r\n<p>With that in place, you can create a new typescript file ending with <code>.tsx</code>, type in the prefix <code>rsr</code> and a suggestion to generate the snippet will appear. Pressing <em>tab</em> on that popup will generate this snippet:<br>\r\n</p>\r\n\r\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">const</span> <span class=\"nx\">initialState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n  <span class=\"c1\">//</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"kd\">const</span> <span class=\"nx\">reducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\r\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"na\">default</span><span class=\"p\">:</span>\r\n      <span class=\"k\">return</span> <span class=\"nx\">state</span>\r\n  <span class=\"p\">}</span>\r\n<span class=\"p\">}</span>\r\n</code></pre></div>\r\n\r\n\r\n\r\n<p>But the issue with this is that this will persist through <em>all of your projects</em> (which in some cases can be powerful for general snippets). Some projects will be configured a little differently, and a global file to configure snippets begins to become a problem when you need to distinguish between specific use cases. For example, one use case is when project structures are different for each project:<br>\r\n</p>\r\n\r\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\r\n  </span><span class=\"nl\">\"import Link from components/common/Link\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"prefix\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"gcl\"</span><span class=\"p\">,</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"import Link from \'components/common/Link\'\"</span><span class=\"w\">\r\n  </span><span class=\"p\">},</span><span class=\"w\">\r\n  </span><span class=\"nl\">\"border test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"prefix\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"b1\"</span><span class=\"p\">,</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"border: \'1px solid red\',\"</span><span class=\"w\">\r\n  </span><span class=\"p\">},</span><span class=\"w\">\r\n  </span><span class=\"nl\">\"border test2\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"prefix\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"b2\"</span><span class=\"p\">,</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"border: \'1px solid green\',\"</span><span class=\"w\">\r\n  </span><span class=\"p\">},</span><span class=\"w\">\r\n  </span><span class=\"nl\">\"border test3\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"prefix\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"b3\"</span><span class=\"p\">,</span><span class=\"w\">\r\n    </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"border: \'1px solid magenta\',\"</span><span class=\"w\">\r\n  </span><span class=\"p\">}</span><span class=\"w\">\r\n</span><span class=\"p\">}</span><span class=\"w\">\r\n</span></code></pre></div>\r\n\r\n\r\n\r\n<p>This might be sufficient for a project with that specific file/folder structure, but what if you were working on another project where a <code>Link</code> component had a path like <code>components/Link</code>?</p>\r\n\r\n<p>Notice how the three <em>border tests</em> wrap their values in single quotation marks: <code>border: \'1px solid red\'</code>. This is perfectly valid in JavaScript, but what if you were using <a href=\"https://www.styled-components.com/docs\">styled-components</a> as your styling solution for a project? The syntax is no longer applicable for that workspace because styled components uses normal CSS syntax!</p>\r\n\r\n<p>This is where the <a href=\"https://marketplace.visualstudio.com/items?itemName=rebornix.project-snippets\">Project Snippets</a> begins to shine!</p>\r\n\r\n<p>Project Snippets enables you to declare project/workspace level snippets so that your snippets don\'t collide and pollute other projects. Very useful!</p>\r\n\r\n<h2>\r\n  <a name=\"2-better-comments\" href=\"#2-better-comments\" class=\"anchor\">\r\n  </a>\r\n  2. Better Comments\r\n</h2>\r\n\r\n<p>If you like writing comments in between code then you sometimes might find it a little frustrating to search for the locations of certain ones you wrote in the past because code can sometimes get a little crowded.</p>\r\n\r\n<p>With <a href=\"https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments\">Better Comments</a>, you can make your comments more obvious by introducting colored comments:</p>\r\n\r\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gwM_aWUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/better-comments.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gwM_aWUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/better-comments.jpg\" alt=\"better-comments\" loading=\"lazy\"></a></p>\r\n\r\n<p>Now you can better alert your team members with an <code>!</code> or <code>?</code> to bring something to their attention :)</p>\r\n\r\n<h2>\r\n  <a name=\"3-bracker-pair-colorizer\" href=\"#3-bracker-pair-colorizer\" class=\"anchor\">\r\n  </a>\r\n  3. Bracker Pair Colorizer\r\n</h2>\r\n\r\n<p>The first time I saw a screenshot of this extension I just knew I had to adopt and introduce this right into my development toolkit. Coding is my passion and passion should be fun. So with that mindset, this definitely helps me enjoy what I love doing even more.</p>\r\n\r\n<p>A quick fun little fact is that sometimes a little more color can help speed up the development flow as it can <a href=\"https://www.funderstanding.com/brain/your-brain-on-color/\">influence blood flow and arousal</a>. In other words--you\'re not <em>just</em> getting entertained, you\'re improving your health as well just by adding colors to your work flow!</p>\r\n\r\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_Yd8MwJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/bracketpaircolorizer.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_Yd8MwJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/bracketpaircolorizer.jpg\" alt=\"bracketpaircolorizer\" loading=\"lazy\"></a></p>\r\n\r\n<h2>\r\n  <a name=\"4-material-theme\" href=\"#4-material-theme\" class=\"anchor\">\r\n  </a>\r\n  4. Material Theme\r\n</h2>\r\n\r\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme\">Material Theme</a> is an epic theme you can install right into VS code to make your code look like this:</p>\r\n\r\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bfn_QR_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/material-theme.JPG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bfn_QR_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/material-theme.JPG\" alt=\"material-theme\" loading=\"lazy\"></a></p>\r\n\r\n<p>That\'s got to be one of the best themes ever created. I\'m not sure how I\'d go into detail about how awesome a theme is, but this is just awesome. Install it now and join me in my quest to convert the world into a world of material theme-ists today! (Or don\'t join me and just use the theme. That\'s cool too)</p>\r\n\r\n<h2>\r\n  <a name=\"5-typescripteslintparser\" href=\"#5-typescripteslintparser\" class=\"anchor\">\r\n  </a>\r\n  5. @typescript-eslint/parser\r\n</h2>\r\n\r\n<p>If you\'re a TypeScript user: With the <a href=\"https://github.com/typescript-eslint/typescript-eslint#what-about-tslint\">backers behind TSLint announcing plans to deprecate TSLint</a> sometime this year, you should probably start looking into moving your tslint configurations to use the ESLint + TypeScript config approach.</p>\r\n\r\n<p>Projects have gradually been moving towards adopting @typescript-eslint/parser and related packages to secure a future-proof setup for their projects. You\'ll still be able to leverage most of the ESLint\'s rules and compatibility with prettier using the new setups.</p>\r\n\r\n<h2>\r\n  <a name=\"6-stylelint\" href=\"#6-stylelint\" class=\"anchor\">\r\n  </a>\r\n  6. Stylelint\r\n</h2>\r\n\r\n<p>For me, <a href=\"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint\">stylelint</a> is a must in all of my projects for multiple of reasons:</p>\r\n\r\n<ol>\r\n<li>It helps avoid errors.</li>\r\n<li>It enforces styling conventions in css.</li>\r\n<li>It goes hand in hand with <em>prettier</em> support.</li>\r\n<li>It supports css/scss/sass/less.</li>\r\n<li>It supports plugins written by the community.</li>\r\n</ol>\r\n\r\n<h2>\r\n  <a name=\"7-markdownlint-docsify\" href=\"#7-markdownlint-docsify\" class=\"anchor\">\r\n  </a>\r\n  7. Markdownlint + Docsify\r\n</h2>\r\n\r\n<p>Now i\'m not sure how you or other developers like to take notes when brainstorming for their projects, but I like to write down notes in <a href=\"https://daringfireball.net/projects/markdown/\">markdown</a> format.</p>\r\n\r\n<p>For one, it\'s easy for me to understand. There\'s also an abundance of tools available out there that help facilitate the process of writing markdown text, including <a href=\"https://github.com/DavidAnson/vscode-markdownlint\">markdownlint</a>. Markdownlint is a vs code extension linter that assists in style checking inside your <code>.md</code> files. The cooler part is that it supports <em>prettier formatting</em>!</p>\r\n\r\n<p>In addition I personally like to install <a href=\"https://docsify.js.org/#/\">Docsify</a> on all of my projects as it supports markdown and other enhancements for each project.</p>\r\n\r\n<h2>\r\n  <a name=\"8-todo-highlight\" href=\"#8-todo-highlight\" class=\"anchor\">\r\n  </a>\r\n  8. TODO Highlight\r\n</h2>\r\n\r\n<p>I have a habit of writing todos in my application code, so extensions like <a href=\"https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight\">TODO Highlight</a> are really useful to highlight the todos I set in place throughout my projects.</p>\r\n\r\n<h2>\r\n  <a name=\"9-import-cost\" href=\"#9-import-cost\" class=\"anchor\">\r\n  </a>\r\n  9. Import Cost\r\n</h2>\r\n\r\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost\">Import Cost</a> is one of those tools that become very useful the first time you try it. But after awhile you start to realize you don\'t really need the tool anymore because it tells you what you already know over time. Nonetheless, try this tool out for awhile because you might find it useful.</p>\r\n\r\n<h2>\r\n  <a name=\"10-highlight-matching-tag\" href=\"#10-highlight-matching-tag\" class=\"anchor\">\r\n  </a>\r\n  10. Highlight Matching Tag\r\n</h2>\r\n\r\n<p>Sometimes it can get frustrating trying to match the other end of a tag. That\'s where <a href=\"https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag\">Highlight Matching Tag</a> becomes to take your frustrations away:</p>\r\n\r\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Bg_uDm3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/highlightmatchingtag.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Bg_uDm3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/highlightmatchingtag.jpg\" alt=\"highlightmatchingtag\" loading=\"lazy\"></a></p>\r\n\r\n<h2>\r\n  <a name=\"11-vscodespotify\" href=\"#11-vscodespotify\" class=\"anchor\">\r\n  </a>\r\n  11. vscode-spotify\r\n</h2>\r\n\r\n<p>And speaking of frustrations, sometimes it can get frustrating having to go back into your music player to switch music and then having to go back to vs code to continue doing what you were doing. That\'s where <a href=\"https://marketplace.visualstudio.com/items?itemName=shyykoserhiy.vscode-spotify\">vscode-spotify</a> comes in, because it allows you to use spotify right inside vs code!</p>\r\n\r\n<p>With this extension you\'ll be able to see the song that is currently playing in the status bar, switch between songs by pressing hotkeys, clicking buttons to control spotify, and more!</p>\r\n\r\n<h2>\r\n  <a name=\"11-graphql-for-vscode\" href=\"#11-graphql-for-vscode\" class=\"anchor\">\r\n  </a>\r\n  11. GraphQL for VSCode\r\n</h2>\r\n\r\n<p><em>GraphQL</em> has constantly been growing as we\'re starting to see it just about every corner in the JavaScript community. And with that said, it\'s probably a good idea to start thinking about installing <a href=\"https://marketplace.visualstudio.com/items?itemName=kumar-harsh.graphql-for-vscode\">GraphQL for VSCode</a> into your vs code if you haven\'t already so that you benefit from syntax highlighting, linting and auto complete features when dealing with GraphQL syntax.</p>\r\n\r\n<p>I personally use <a href=\"https://www.gatsbyjs.org\">GatsbyJS</a> a lot, so my daily coding life involves reading GraphQL syntax somewhat.</p>\r\n\r\n<h2>\r\n  <a name=\"12-indent-rainbow\" href=\"#12-indent-rainbow\" class=\"anchor\">\r\n  </a>\r\n  12. Indent Rainbow\r\n</h2>\r\n\r\n<p>A similar reason to the <em>Highlight Matching Tag</em> above. If you have trouble finding your way through indentations, then <a href=\"https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow\">Indent Rainbow</a> can help make those indentations easier to read.</p>\r\n\r\n<p>Here\'s an example:</p>\r\n\r\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PpMYHt3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/indent-rainbow.JPG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PpMYHt3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/indent-rainbow.JPG\" alt=\"indent-rainbow\" loading=\"lazy\"></a></p>\r\n\r\n<h2>\r\n  <a name=\"13-color-highlight\" href=\"#13-color-highlight\" class=\"anchor\">\r\n  </a>\r\n  13. Color Highlight\r\n</h2>\r\n\r\n<p>This is one of those extensions where <em>everybody</em> asks me \"Where did you get that?\" if they haven\'t come across this extension yet. Basically <a href=\"https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight\">Color Highlight</a> helps highlight colors inside your code like this:</p>\r\n\r\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HdWpemOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/color-highlight.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HdWpemOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/color-highlight.jpg\" alt=\"color-highlight\" loading=\"lazy\"></a></p>\r\n\r\n<h2>\r\n  <a name=\"14-color-picker\" href=\"#14-color-picker\" class=\"anchor\">\r\n  </a>\r\n  14. Color Picker\r\n</h2>\r\n\r\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color\">Color Picker</a> is a vscode extension that gives you a graphical user interface to assist in selecting and generating color codes like CSS color notations.</p>\r\n\r\n<h2>\r\n  <a name=\"15-rest-client\" href=\"#15-rest-client\" class=\"anchor\">\r\n  </a>\r\n  15. REST Client\r\n</h2>\r\n\r\n<p>The first time I read about <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\">REST Client</a> and tried it out for myself, it didn\'t seem like a very useful tool over an established software like <a href=\"https://www.getpostman.com/\">Postman</a>.</p>\r\n\r\n<p>But the more I played with the REST Client extension, the more I realized how much it can impact my development tool especially when testing APIs.</p>\r\n\r\n<p>You can just create a new file and have this one line:<br>\r\n</p>\r\n\r\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">https</span><span class=\"p\">:</span><span class=\"c1\">//google.com</span>\r\n</code></pre></div>\r\n\r\n\r\n\r\n<p>All you need to do to create an HTTP GET request is to highlight that one line, go to the command palette (CTRL + SHIFT + P), click <em>Rest Client: Send Request</em> and it will go ahead and pop open a new tab with the request response details in the split of a second.</p>\r\n\r\n<p>Very useful:</p>\r\n\r\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dZ3jd3KS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/restclient1.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dZ3jd3KS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/restclient1.jpg\" alt=\"rest-client1\" loading=\"lazy\"></a></p>\r\n\r\n<p>You can even pass in parameters or request body data to a POST request with just a couple of more lines of code underneath:<br>\r\n</p>\r\n\r\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">POST</span> <span class=\"nx\">https</span><span class=\"p\">:</span><span class=\"c1\">//test.someapi.com/v1/account/user/login/</span>\r\n<span class=\"nx\">Content</span><span class=\"o\">-</span><span class=\"nx\">Type</span><span class=\"p\">:</span> <span class=\"nx\">application</span><span class=\"o\">/</span><span class=\"nx\">json</span>\r\n\r\n<span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">email</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">someemail@gmail.com</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">password</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\r\n</code></pre></div>\r\n\r\n\r\n\r\n<p>And that will make a POST request with body parameters <code>{ \"email\": \"someemail@gmail.com\", \"password\": 1 }</code></p>\r\n\r\n<p>But that\'s just scratching the surface of the possibilities of the extension. <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\">Read</a> about it to find out more.</p>\r\n\r\n<h2>\r\n  <a name=\"16-settings-sync\" href=\"#16-settings-sync\" class=\"anchor\">\r\n  </a>\r\n  16. Settings Sync\r\n</h2>\r\n\r\n<p>I hated having to manually write down a markdown list of notes of extensions that I use in my development tool and saving it in a notes service like Evernote until <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">Settings Sync</a> came to the rescue.</p>\r\n\r\n<p>Basically, you just need a gist/github account and everytime you want to save your settings (this includes keybindings, snippets, extensions, etc) you just need to press <em>SHIFT + ALT + U</em> to upload the <em>private</em> settings to your gist account, so that the next time you log in or reformat to another computer, you can immediately just download your settings in an instant by pressing <em>SHIFT + ALT + D</em>.</p>\r\n\r\n<h2>\r\n  <a name=\"17-todo-tree\" href=\"#17-todo-tree\" class=\"anchor\">\r\n  </a>\r\n  17. Todo Tree\r\n</h2>\r\n\r\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree\">Todo Tree</a> will help you find all the todos you created throughout your application code into a single tree where you can view them all at once on the left side of your panel:</p>\r\n\r\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qWevGYWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/todotree1.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qWevGYWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/todotree1.jpg\" alt=\"todo-tree-1\" loading=\"lazy\"></a></p>\r\n\r\n<h2>\r\n  <a name=\"18-toggle-quotes\" href=\"#18-toggle-quotes\" class=\"anchor\">\r\n  </a>\r\n  18. Toggle Quotes\r\n</h2>\r\n\r\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=BriteSnow.vscode-toggle-quotes\">Toggle Quotes</a> is a fun utility extension that lets you toggle between quotes. It comes in handy when you need to switch to backticks when you\'re about to use string interpolations especially when prettier has a habit of prettifying your strings to single quotes.</p>\r\n\r\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1vh08SnC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/togglequotes1.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1vh08SnC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://jsmanifest.s3-us-west-1.amazonaws.com/posts/26-miraculous-vscode-tools-for-javascript-developers-in-2019/togglequotes1.gif\" alt=\"toggle quotes for vs code\" loading=\"lazy\"></a></p>\r\n\r\n<h2>\r\n  <a name=\"19-better-align\" href=\"#19-better-align\" class=\"anchor\">\r\n  </a>\r\n  19. Better Align\r\n</h2>\r\n\r\n<p>You can align your code without selecting them first with <a href=\"https://marketplace.visualstudio.com/items?itemName=wwm.better-align\">Better Align</a>.</p>\r\n\r\n<p>To use: Place your cursor in the code you want to be aligned, then pop open your command palette with <em>CTRL + SHIFT + P</em> (or whatever your customized shortcut is to open the command palette) and invoke the <em>Align</em> command.</p>\r\n\r\n<h2>\r\n  <a name=\"20-auto-close-tag\" href=\"#20-auto-close-tag\" class=\"anchor\">\r\n  </a>\r\n  20. Auto Close Tag\r\n</h2>\r\n\r\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag\">Auto Close Tag</a> has been useful to me since the day I first started VS code. It allows you to type something like <code>&lt;div</code>, following a slash <code>/</code> and it will complete the last arrow for you. This is something that isn\'t in vs code by default and is very useful to me :)</p>\r\n\r\n<h2>\r\n  <a name=\"21-sort-lines\" href=\"#21-sort-lines\" class=\"anchor\">\r\n  </a>\r\n  21. Sort Lines\r\n</h2>\r\n\r\n<p>I have a frustrating habit of becoming frustrated when my arrays aren\'t aligned alphabetically. Luckily tools like <a href=\"https://marketplace.visualstudio.com/items?itemName=Tyriar.sort-lines\">Sort Lines</a> exist to make my life easier. You might find this very helpful to you as well if you get frustrated in a similar fashion.</p>\r\n\r\n<h2>\r\n  <a name=\"22-vscode-google-translate\" href=\"#22-vscode-google-translate\" class=\"anchor\">\r\n  </a>\r\n  22. VScode Google Translate\r\n</h2>\r\n\r\n<p>I might be the only one that finds this useful, but <a href=\"https://marketplace.visualstudio.com/items?itemName=funkyremi.vscode-google-translate\">VScode Google Translate</a> helps me in my projects as I am involved in a project that is multi lingual. Useful if you don\'t want to leave your editor.</p>\r\n\r\n<h2>\r\n  <a name=\"23-prettier\" href=\"#23-prettier\" class=\"anchor\">\r\n  </a>\r\n  23. Prettier\r\n</h2>\r\n\r\n<p><a href=\"https://github.com/prettier/prettier-vscode\">Prettier</a> is an extension for vs code that automatically formats your JavaScript/TypeScript/etc. code using prettier.</p>\r\n\r\n<h2>\r\n  <a name=\"24-material-icon-theme\" href=\"#24-material-icon-theme\" class=\"anchor\">\r\n  </a>\r\n  24. Material Icon Theme\r\n</h2>\r\n\r\n<p>I prefer <a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\">Material Icon Theme</a> over other icon themes because it\'s a little more obvious to the eye which files types are which, especially when working in a dark theme.</p>\r\n\r\n<h2>\r\n  <a name=\"25-intellisense-for-css-class-names-in-html\" href=\"#25-intellisense-for-css-class-names-in-html\" class=\"anchor\">\r\n  </a>\r\n  25. IntelliSense for CSS Class Names in HTML\r\n</h2>\r\n\r\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion\">IntelliSense for CSS class names in HTML</a> is a CSS class name completion based on the HTML <code>class</code> attribute based on the definitions found in your workspace.</p>\r\n\r\n<h2>\r\n  <a name=\"26-path-intellisense\" href=\"#26-path-intellisense\" class=\"anchor\">\r\n  </a>\r\n  26. Path IntelliSense\r\n</h2>\r\n\r\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\">Path Intellisense</a> is a vs code extension that autocompletes file names for you.</p>\r\n\r\n<h2>\r\n  <a name=\"conclusion\" href=\"#conclusion\" class=\"anchor\">\r\n  </a>\r\n  Conclusion\r\n</h2>\r\n\r\n<p>And that concludes the end of this post! I hope this helped you find something new to add onto your development kit! Look forward for more posts from me in the future!</p>\r\n\r\n\r\n      ', 'https://thepracticaldev.s3.amazonaws.com/i/qdej5d02xn0bbyzbf1bm.jpg', 20, 3, 1),
(13, 'LODVG - Mi vida sin ti', 'Un día más vuelve a empezar,<br>\r\nDuerme la luna en San Sebastían<br>\r\nBusco café, oigo llover y pienso en ti.<br>\r\nQue guapo estás al despertar,<br>\r\nTan despeinado y sin arreglar,<br>\r\nMe hace feliz verte a mi lado y<br>\r\nPienso en ti.<br>\r\nVamos a querernos toda la vida,<br>\r\nComo se quieren la noche y el día<br>\r\nCuando hablan de ti,<br>\r\nVamos a querernos<br>\r\nEn cualquier vida,<br>\r\nPorque prefiero dejarme morir<br>\r\nQue estar sin ti.<br>\r\nNada es igual cuando no estás,<br>\r\nCuando no vuelves de pasear,<br>\r\nOigo reír a mi equilibrio<br>\r\nY pienso en ti.<br>\r\nPienso en ti y vuelves a mí,<br>\r\nVuelve la paz que un día perdí,<br>\r\nChoque frontal, nadie con vida<br>\r\nY yo sin ti.<br>\r\nVamos a querernos toda la vida,<br>\r\nComo se quieren la noche y el día<br>\r\nCuando hablan de ti,<br>\r\nVamos a querernos en cualquier vida,<br>\r\nPorque prefiero dejarme morir<br>\r\nQue estar sin ti.<br>\r\nTe necesito aquí, cerca de mi,<br>\r\nMuy cerca de mi, muy cerca<br>\r\nTe necesito aquí, verte feliz que<br>\r\nVuelvas por mi, que vuelvas para<br>\r\nQuererme, cuidarme, acostarme,<br>\r\nHablarme y darme la mano, un beso,<br>\r\nUn regalo y verte dormido, sonriente, conmigo<br>\r\nY decir que te espero, que te echo de menos.<br>\r\nQuiero entender mi vida sin ti<br>\r\nNo quiero escuchar consuelos de nadie,<br>\r\nQuiero gritar, correr hacia ti, no<br>\r\nQuiero entender que al morir me mataste<br>\r\nQuiero vivir... pensando en ti.<br>', 'https://t2.genius.com/unsafe/311x311/https%3A%2F%2Fimages.genius.com%2F9af608c020239e66d6893a802017b438.1000x1000x1.jpg', 4, 1, 0);

-- --------------------------------------------------------

--
-- Structure de la table `articles_categories`
--

DROP TABLE IF EXISTS `articles_categories`;
CREATE TABLE `articles_categories` (
  `article_id` int(11) NOT NULL,
  `category_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Déchargement des données de la table `articles_categories`
--

INSERT INTO `articles_categories` (`article_id`, `category_id`) VALUES
(1, 1),
(2, 2),
(3, 2),
(6, 2),
(7, 3),
(7, 4),
(8, 3),
(8, 4);

-- --------------------------------------------------------

--
-- Structure de la table `authors`
--

DROP TABLE IF EXISTS `authors`;
CREATE TABLE `authors` (
  `id` int(11) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `firstname` varchar(255) NOT NULL,
  `lastname` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Déchargement des données de la table `authors`
--

INSERT INTO `authors` (`id`, `email`, `password`, `firstname`, `lastname`) VALUES
(1, 'paul.auchon@kiwi.fr', '', 'Paul', 'Auchon'),
(2, 'gerard.manvussa@cherry.org', '', 'Manvussa', 'Gérard'),
(3, 'harry.cover@pear.fr', '', 'Harry', 'Cover');

-- --------------------------------------------------------

--
-- Structure de la table `categories`
--

DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories` (
  `id` int(11) NOT NULL,
  `category` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Déchargement des données de la table `categories`
--

INSERT INTO `categories` (`id`, `category`) VALUES
(1, 'API'),
(2, 'Performance'),
(3, 'IDE'),
(4, 'VS Code');

--
-- Index pour les tables déchargées
--

--
-- Index pour la table `articles`
--
ALTER TABLE `articles`
  ADD PRIMARY KEY (`id`);

--
-- Index pour la table `articles_categories`
--
ALTER TABLE `articles_categories`
  ADD PRIMARY KEY (`article_id`,`category_id`);

--
-- Index pour la table `authors`
--
ALTER TABLE `authors`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email` (`email`);

--
-- Index pour la table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT pour les tables déchargées
--

--
-- AUTO_INCREMENT pour la table `articles`
--
ALTER TABLE `articles`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT pour la table `authors`
--
ALTER TABLE `authors`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT pour la table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
